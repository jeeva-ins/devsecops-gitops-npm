name: Node.js CI

on:
  push:
    branches:
      - main
    paths-ignore:
      - 'kubernetes/deployment.yaml'   
  pull_request:
    branches:
      - main

jobs:
  test:
    runs-on: ubuntu-latest
    name: Unit Test Stage
    steps:
      - uses: actions/checkout@v4
        name: code checkout

      - name: Use Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
      - name: install dependencies
        run: npm ci
        

      - run: npm test
        name: Unit test

      - name: Archive code coverage results
        uses: actions/upload-artifact@v4
        with:
          name: code-coverage-report
          path: output/test/code-coverage.html
  lint:
    name: Static Code Analysis Stage
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Use Node.js

        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: install dependencies
        run: npm ci

      - name: Lint ESlint 
        run: npm run lint
  build:
    runs-on: ubuntu-latest
    needs: [test,lint]
    steps:
      - uses: actions/checkout@v4
        name: code checkout

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: install dependencies
        run: npm ci
        

      - name: build project
        run: npm run build 
        
      - name: Archive production artifacts
        uses: actions/upload-artifact@v4
        with:
          name: dist-without-markdown
          path: |
            dist
            
  docker-image-build-scan-and-push:
    runs-on: ubuntu-latest
    needs: [build]
    env:
     REGISTRY: ghcr.io
     IMAGE_NAME: ${{ github.repository }}
    permissions:
      contents: read
      packages: write
      attestations: write
      id-token: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to the Container registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.TOKEN }}
      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=sha,format=long
            type=ref,event=branch
            latest
      - name: Build and load Docker image
        id: push
        uses: docker/build-push-action@v6
        with:
          context: .  #Dockerfile path
          push: false
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          load: true
      - name: Manual Trivy Setup
        uses: aquasecurity/setup-trivy@v0.2.0
        with:
              cache: true
              version: v0.60.0
      - name: Run Trivy vulnerability scanner
        run: trivy image --format table  ghcr.io/jeeva-prof/devsecops-npm:sha-${{github.sha}}
        
      - name: Build and push Docker image
        id: push-now
        uses: docker/build-push-action@v6
        with:
            context: .  #Dockerfile path
            push: true
            tags: ${{ steps.meta.outputs.tags }}
            labels: ${{ steps.meta.outputs.labels }}

  Update-manifest:
    runs-on: ubuntu-latest
    needs: [docker-image-build-scan-and-push] 
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
            token: ${{ secrets.TOKEN }}
      - name: Setup Git config
        run: |
         git config --global user.email "jeeva@example.com"
         git config --global user.name "Jeeva"
      - name: update kubernetes  manifest
        env:
         REGISTRY: ghcr.io 
         IMAGE_NAME: jeeva-prof/devsecops-npm
         imagetag: ${{github.sha}}  
         
        run: |
         IMAGE=${{env.REGISTRY}}/${{env.IMAGE_NAME}}:sha-${{env.imagetag}}
         sed -i "s+image: ghcr.io.*+image: ${IMAGE}+g" kubernetes/deployment.yaml
         git add kubernetes/deployment.yaml
         git commit -m "Updated Kubernetes deployment with new image tag:" || echo "No changes to commit"
         git push origin main        